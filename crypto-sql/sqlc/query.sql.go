// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
)

const delete10MinBUSDPercent = `-- name: Delete10MinBUSDPercent :exec
DELETE FROM tblBUSD10MinPercent
`

func (q *Queries) Delete10MinBUSDPercent(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, delete10MinBUSDPercent)
	return err
}

const delete15MinBUSDPercent = `-- name: Delete15MinBUSDPercent :exec
DELETE FROM tblBUSD15MinPercent
`

func (q *Queries) Delete15MinBUSDPercent(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, delete15MinBUSDPercent)
	return err
}

const delete1MinBUSDPercent = `-- name: Delete1MinBUSDPercent :exec
DELETE FROM tblBUSD1MinPercent
`

func (q *Queries) Delete1MinBUSDPercent(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, delete1MinBUSDPercent)
	return err
}

const delete30MinBUSDPercent = `-- name: Delete30MinBUSDPercent :exec
DELETE FROM tblBUSD30MinPercent
`

func (q *Queries) Delete30MinBUSDPercent(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, delete30MinBUSDPercent)
	return err
}

const delete5MinBUSDPercent = `-- name: Delete5MinBUSDPercent :exec
DELETE FROM tblBUSD5MinPercent
`

func (q *Queries) Delete5MinBUSDPercent(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, delete5MinBUSDPercent)
	return err
}

const delete60MinBUSDPercent = `-- name: Delete60MinBUSDPercent :exec
DELETE FROM tblBUSD60MinPercent
`

func (q *Queries) Delete60MinBUSDPercent(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, delete60MinBUSDPercent)
	return err
}

const deleteTopCoinHistory = `-- name: DeleteTopCoinHistory :exec
DELETE FROM tblBUSDTopCoinHistory WHERE "time" < (NOW() - INTERVAL '1 days')
`

func (q *Queries) DeleteTopCoinHistory(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteTopCoinHistory)
	return err
}

const deleteWasteBUSDPrice = `-- name: DeleteWasteBUSDPrice :exec
DELETE FROM tblBUSDPrice WHERE "time" < (NOW() - INTERVAL '7200 seconds')
`

func (q *Queries) DeleteWasteBUSDPrice(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteWasteBUSDPrice)
	return err
}

const get10MinAgoBUSDPrice = `-- name: Get10MinAgoBUSDPrice :one
SELECT "time","price" FROM tblBUSDPrice WHERE "time" > (NOW() - INTERVAL '601 seconds') ORDER BY "time" ASC LIMIT 1
`

type Get10MinAgoBUSDPriceRow struct {
	Time  sql.NullTime
	Price sql.NullString
}

func (q *Queries) Get10MinAgoBUSDPrice(ctx context.Context) (Get10MinAgoBUSDPriceRow, error) {
	row := q.db.QueryRowContext(ctx, get10MinAgoBUSDPrice)
	var i Get10MinAgoBUSDPriceRow
	err := row.Scan(&i.Time, &i.Price)
	return i, err
}

const get15MinAgoBUSDPrice = `-- name: Get15MinAgoBUSDPrice :one
SELECT "time","price" FROM tblBUSDPrice WHERE "time" > (NOW() - INTERVAL '901 seconds') ORDER BY "time" ASC LIMIT 1
`

type Get15MinAgoBUSDPriceRow struct {
	Time  sql.NullTime
	Price sql.NullString
}

func (q *Queries) Get15MinAgoBUSDPrice(ctx context.Context) (Get15MinAgoBUSDPriceRow, error) {
	row := q.db.QueryRowContext(ctx, get15MinAgoBUSDPrice)
	var i Get15MinAgoBUSDPriceRow
	err := row.Scan(&i.Time, &i.Price)
	return i, err
}

const get1MinAgoBUSDPrice = `-- name: Get1MinAgoBUSDPrice :one
SELECT "time", "price" FROM tblBUSDPrice WHERE "time" > (NOW() - INTERVAL '61 seconds') ORDER BY "time" ASC LIMIT 1
`

type Get1MinAgoBUSDPriceRow struct {
	Time  sql.NullTime
	Price sql.NullString
}

func (q *Queries) Get1MinAgoBUSDPrice(ctx context.Context) (Get1MinAgoBUSDPriceRow, error) {
	row := q.db.QueryRowContext(ctx, get1MinAgoBUSDPrice)
	var i Get1MinAgoBUSDPriceRow
	err := row.Scan(&i.Time, &i.Price)
	return i, err
}

const get30MinAgoBUSDPrice = `-- name: Get30MinAgoBUSDPrice :one
SELECT "time","price" FROM tblBUSDPrice WHERE "time" > (NOW() - INTERVAL '1801 seconds') ORDER BY "time" ASC LIMIT 1
`

type Get30MinAgoBUSDPriceRow struct {
	Time  sql.NullTime
	Price sql.NullString
}

func (q *Queries) Get30MinAgoBUSDPrice(ctx context.Context) (Get30MinAgoBUSDPriceRow, error) {
	row := q.db.QueryRowContext(ctx, get30MinAgoBUSDPrice)
	var i Get30MinAgoBUSDPriceRow
	err := row.Scan(&i.Time, &i.Price)
	return i, err
}

const get5MinAgoBUSDPrice = `-- name: Get5MinAgoBUSDPrice :one
SELECT "time","price" FROM tblBUSDPrice WHERE "time" > (NOW() - INTERVAL '301 seconds') ORDER BY "time" ASC LIMIT 1
`

type Get5MinAgoBUSDPriceRow struct {
	Time  sql.NullTime
	Price sql.NullString
}

func (q *Queries) Get5MinAgoBUSDPrice(ctx context.Context) (Get5MinAgoBUSDPriceRow, error) {
	row := q.db.QueryRowContext(ctx, get5MinAgoBUSDPrice)
	var i Get5MinAgoBUSDPriceRow
	err := row.Scan(&i.Time, &i.Price)
	return i, err
}

const get60MinAgoBUSDPrice = `-- name: Get60MinAgoBUSDPrice :one
SELECT "time","price" FROM tblBUSDPrice WHERE "time" > (NOW() - INTERVAL '3601 seconds') ORDER BY "time" ASC LIMIT 1
`

type Get60MinAgoBUSDPriceRow struct {
	Time  sql.NullTime
	Price sql.NullString
}

func (q *Queries) Get60MinAgoBUSDPrice(ctx context.Context) (Get60MinAgoBUSDPriceRow, error) {
	row := q.db.QueryRowContext(ctx, get60MinAgoBUSDPrice)
	var i Get60MinAgoBUSDPriceRow
	err := row.Scan(&i.Time, &i.Price)
	return i, err
}

const getAll10MinPercentAsc = `-- name: GetAll10MinPercentAsc :many
SELECT id, time, prevtime, symbol, price, prevprice, percent FROM tblBUSD10MinPercent ORDER BY "percent" ASC LIMIT $1
`

func (q *Queries) GetAll10MinPercentAsc(ctx context.Context, limit int32) ([]Tblbusd10minpercent, error) {
	rows, err := q.db.QueryContext(ctx, getAll10MinPercentAsc, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tblbusd10minpercent
	for rows.Next() {
		var i Tblbusd10minpercent
		if err := rows.Scan(
			&i.ID,
			&i.Time,
			&i.Prevtime,
			&i.Symbol,
			&i.Price,
			&i.Prevprice,
			&i.Percent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAll10MinPercentDesc = `-- name: GetAll10MinPercentDesc :many
SELECT id, time, prevtime, symbol, price, prevprice, percent FROM tblBUSD10MinPercent ORDER BY "percent" DESC LIMIT $1
`

func (q *Queries) GetAll10MinPercentDesc(ctx context.Context, limit int32) ([]Tblbusd10minpercent, error) {
	rows, err := q.db.QueryContext(ctx, getAll10MinPercentDesc, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tblbusd10minpercent
	for rows.Next() {
		var i Tblbusd10minpercent
		if err := rows.Scan(
			&i.ID,
			&i.Time,
			&i.Prevtime,
			&i.Symbol,
			&i.Price,
			&i.Prevprice,
			&i.Percent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAll15MinPercentAsc = `-- name: GetAll15MinPercentAsc :many
SELECT id, time, prevtime, symbol, price, prevprice, percent FROM tblBUSD15MinPercent ORDER BY "percent" ASC LIMIT $1
`

func (q *Queries) GetAll15MinPercentAsc(ctx context.Context, limit int32) ([]Tblbusd15minpercent, error) {
	rows, err := q.db.QueryContext(ctx, getAll15MinPercentAsc, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tblbusd15minpercent
	for rows.Next() {
		var i Tblbusd15minpercent
		if err := rows.Scan(
			&i.ID,
			&i.Time,
			&i.Prevtime,
			&i.Symbol,
			&i.Price,
			&i.Prevprice,
			&i.Percent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAll15MinPercentDesc = `-- name: GetAll15MinPercentDesc :many
SELECT id, time, prevtime, symbol, price, prevprice, percent FROM tblBUSD15MinPercent ORDER BY "percent" DESC LIMIT $1
`

func (q *Queries) GetAll15MinPercentDesc(ctx context.Context, limit int32) ([]Tblbusd15minpercent, error) {
	rows, err := q.db.QueryContext(ctx, getAll15MinPercentDesc, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tblbusd15minpercent
	for rows.Next() {
		var i Tblbusd15minpercent
		if err := rows.Scan(
			&i.ID,
			&i.Time,
			&i.Prevtime,
			&i.Symbol,
			&i.Price,
			&i.Prevprice,
			&i.Percent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAll1MinPercentAsc = `-- name: GetAll1MinPercentAsc :many
SELECT id, time, prevtime, symbol, price, prevprice, percent FROM tblBUSD1MinPercent ORDER BY "percent" ASC LIMIT $1
`

func (q *Queries) GetAll1MinPercentAsc(ctx context.Context, limit int32) ([]Tblbusd1minpercent, error) {
	rows, err := q.db.QueryContext(ctx, getAll1MinPercentAsc, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tblbusd1minpercent
	for rows.Next() {
		var i Tblbusd1minpercent
		if err := rows.Scan(
			&i.ID,
			&i.Time,
			&i.Prevtime,
			&i.Symbol,
			&i.Price,
			&i.Prevprice,
			&i.Percent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAll1MinPercentDesc = `-- name: GetAll1MinPercentDesc :many
SELECT id, time, prevtime, symbol, price, prevprice, percent FROM tblBUSD1MinPercent ORDER BY "percent" DESC LIMIT $1
`

func (q *Queries) GetAll1MinPercentDesc(ctx context.Context, limit int32) ([]Tblbusd1minpercent, error) {
	rows, err := q.db.QueryContext(ctx, getAll1MinPercentDesc, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tblbusd1minpercent
	for rows.Next() {
		var i Tblbusd1minpercent
		if err := rows.Scan(
			&i.ID,
			&i.Time,
			&i.Prevtime,
			&i.Symbol,
			&i.Price,
			&i.Prevprice,
			&i.Percent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAll30MinPercentAsc = `-- name: GetAll30MinPercentAsc :many
SELECT id, time, prevtime, symbol, price, prevprice, percent FROM tblBUSD30MinPercent ORDER BY "percent" ASC LIMIT $1
`

func (q *Queries) GetAll30MinPercentAsc(ctx context.Context, limit int32) ([]Tblbusd30minpercent, error) {
	rows, err := q.db.QueryContext(ctx, getAll30MinPercentAsc, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tblbusd30minpercent
	for rows.Next() {
		var i Tblbusd30minpercent
		if err := rows.Scan(
			&i.ID,
			&i.Time,
			&i.Prevtime,
			&i.Symbol,
			&i.Price,
			&i.Prevprice,
			&i.Percent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAll30MinPercentDesc = `-- name: GetAll30MinPercentDesc :many
SELECT id, time, prevtime, symbol, price, prevprice, percent FROM tblBUSD30MinPercent ORDER BY "percent" DESC LIMIT $1
`

func (q *Queries) GetAll30MinPercentDesc(ctx context.Context, limit int32) ([]Tblbusd30minpercent, error) {
	rows, err := q.db.QueryContext(ctx, getAll30MinPercentDesc, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tblbusd30minpercent
	for rows.Next() {
		var i Tblbusd30minpercent
		if err := rows.Scan(
			&i.ID,
			&i.Time,
			&i.Prevtime,
			&i.Symbol,
			&i.Price,
			&i.Prevprice,
			&i.Percent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAll5MinPercentAsc = `-- name: GetAll5MinPercentAsc :many
SELECT id, time, prevtime, symbol, price, prevprice, percent FROM tblBUSD5MinPercent ORDER BY "percent" ASC LIMIT $1
`

func (q *Queries) GetAll5MinPercentAsc(ctx context.Context, limit int32) ([]Tblbusd5minpercent, error) {
	rows, err := q.db.QueryContext(ctx, getAll5MinPercentAsc, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tblbusd5minpercent
	for rows.Next() {
		var i Tblbusd5minpercent
		if err := rows.Scan(
			&i.ID,
			&i.Time,
			&i.Prevtime,
			&i.Symbol,
			&i.Price,
			&i.Prevprice,
			&i.Percent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAll5MinPercentDesc = `-- name: GetAll5MinPercentDesc :many
SELECT id, time, prevtime, symbol, price, prevprice, percent FROM tblBUSD5MinPercent ORDER BY "percent" DESC LIMIT $1
`

func (q *Queries) GetAll5MinPercentDesc(ctx context.Context, limit int32) ([]Tblbusd5minpercent, error) {
	rows, err := q.db.QueryContext(ctx, getAll5MinPercentDesc, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tblbusd5minpercent
	for rows.Next() {
		var i Tblbusd5minpercent
		if err := rows.Scan(
			&i.ID,
			&i.Time,
			&i.Prevtime,
			&i.Symbol,
			&i.Price,
			&i.Prevprice,
			&i.Percent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAll60MinPercentAsc = `-- name: GetAll60MinPercentAsc :many
SELECT id, time, prevtime, symbol, price, prevprice, percent FROM tblBUSD60MinPercent ORDER BY "percent" ASC LIMIT $1
`

func (q *Queries) GetAll60MinPercentAsc(ctx context.Context, limit int32) ([]Tblbusd60minpercent, error) {
	rows, err := q.db.QueryContext(ctx, getAll60MinPercentAsc, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tblbusd60minpercent
	for rows.Next() {
		var i Tblbusd60minpercent
		if err := rows.Scan(
			&i.ID,
			&i.Time,
			&i.Prevtime,
			&i.Symbol,
			&i.Price,
			&i.Prevprice,
			&i.Percent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAll60MinPercentDesc = `-- name: GetAll60MinPercentDesc :many
SELECT id, time, prevtime, symbol, price, prevprice, percent FROM tblBUSD60MinPercent ORDER BY "percent" DESC LIMIT $1
`

func (q *Queries) GetAll60MinPercentDesc(ctx context.Context, limit int32) ([]Tblbusd60minpercent, error) {
	rows, err := q.db.QueryContext(ctx, getAll60MinPercentDesc, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tblbusd60minpercent
	for rows.Next() {
		var i Tblbusd60minpercent
		if err := rows.Scan(
			&i.ID,
			&i.Time,
			&i.Prevtime,
			&i.Symbol,
			&i.Price,
			&i.Prevprice,
			&i.Percent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastestBUSDPrice = `-- name: GetLastestBUSDPrice :one
SELECT "time", "price" FROM tblBUSDPrice ORDER BY "time" DESC LIMIT 1
`

type GetLastestBUSDPriceRow struct {
	Time  sql.NullTime
	Price sql.NullString
}

func (q *Queries) GetLastestBUSDPrice(ctx context.Context) (GetLastestBUSDPriceRow, error) {
	row := q.db.QueryRowContext(ctx, getLastestBUSDPrice)
	var i GetLastestBUSDPriceRow
	err := row.Scan(&i.Time, &i.Price)
	return i, err
}

const getTopCoinHistory = `-- name: GetTopCoinHistory :many
SELECT id, time, topcoin FROM tblBUSDTopCoinHistory ORDER BY "time" DESC LIMIT $1
`

func (q *Queries) GetTopCoinHistory(ctx context.Context, limit int32) ([]Tblbusdtopcoinhistory, error) {
	rows, err := q.db.QueryContext(ctx, getTopCoinHistory, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tblbusdtopcoinhistory
	for rows.Next() {
		var i Tblbusdtopcoinhistory
		if err := rows.Scan(&i.ID, &i.Time, &i.Topcoin); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insert10MinBUSDPercent = `-- name: Insert10MinBUSDPercent :exec
INSERT INTO tblBUSD10MinPercent ("prevtime", "symbol", "price", "prevprice", "percent") VALUES ($1, $2, $3, $4, $5)
`

type Insert10MinBUSDPercentParams struct {
	Prevtime  sql.NullTime
	Symbol    sql.NullString
	Price     sql.NullFloat64
	Prevprice sql.NullFloat64
	Percent   sql.NullFloat64
}

	func (q *Queries) Insert10MinBUSDPercent(ctx context.Context, arg Insert10MinBUSDPercentParams) error {
	_, err := q.db.ExecContext(ctx, insert10MinBUSDPercent,
		arg.Prevtime,
		arg.Symbol,
		arg.Price,
		arg.Prevprice,
		arg.Percent,
	)
	return err
}

const insert15MinBUSDPercent = `-- name: Insert15MinBUSDPercent :exec
INSERT INTO tblBUSD15MinPercent ("prevtime", "symbol", "price", "prevprice", "percent") VALUES ($1, $2, $3, $4, $5)
`

type Insert15MinBUSDPercentParams struct {
	Prevtime  sql.NullTime
	Symbol    sql.NullString
	Price     sql.NullFloat64
	Prevprice sql.NullFloat64
	Percent   sql.NullFloat64
}

func (q *Queries) Insert15MinBUSDPercent(ctx context.Context, arg Insert15MinBUSDPercentParams) error {
	_, err := q.db.ExecContext(ctx, insert15MinBUSDPercent,
		arg.Prevtime,
		arg.Symbol,
		arg.Price,
		arg.Prevprice,
		arg.Percent,
	)
	return err
}

const insert1MinBUSDPercent = `-- name: Insert1MinBUSDPercent :exec
INSERT INTO tblBUSD1MinPercent ("prevtime", "symbol", "price", "prevprice", "percent") VALUES ($1, $2, $3, $4, $5)
`

type Insert1MinBUSDPercentParams struct {
	Prevtime  sql.NullTime
	Symbol    sql.NullString
	Price     sql.NullFloat64
	Prevprice sql.NullFloat64
	Percent   sql.NullFloat64
}

func (q *Queries) Insert1MinBUSDPercent(ctx context.Context, arg Insert1MinBUSDPercentParams) error {
	_, err := q.db.ExecContext(ctx, insert1MinBUSDPercent,
		arg.Prevtime,
		arg.Symbol,
		arg.Price,
		arg.Prevprice,
		arg.Percent,
	)
	return err
}

const insert30MinBUSDPercent = `-- name: Insert30MinBUSDPercent :exec
INSERT INTO tblBUSD30MinPercent ("prevtime", "symbol", "price", "prevprice", "percent") VALUES ($1, $2, $3, $4, $5)
`

type Insert30MinBUSDPercentParams struct {
	Prevtime  sql.NullTime
	Symbol    sql.NullString
	Price     sql.NullFloat64
	Prevprice sql.NullFloat64
	Percent   sql.NullFloat64
}

func (q *Queries) Insert30MinBUSDPercent(ctx context.Context, arg Insert30MinBUSDPercentParams) error {
	_, err := q.db.ExecContext(ctx, insert30MinBUSDPercent,
		arg.Prevtime,
		arg.Symbol,
		arg.Price,
		arg.Prevprice,
		arg.Percent,
	)
	return err
}

const insert5MinBUSDPercent = `-- name: Insert5MinBUSDPercent :exec
INSERT INTO tblBUSD5MinPercent ("prevtime", "symbol", "price", "prevprice", "percent") VALUES ($1, $2, $3, $4, $5)
`

type Insert5MinBUSDPercentParams struct {
	Prevtime  sql.NullTime
	Symbol    sql.NullString
	Price     sql.NullFloat64
	Prevprice sql.NullFloat64
	Percent   sql.NullFloat64
}

func (q *Queries) Insert5MinBUSDPercent(ctx context.Context, arg Insert5MinBUSDPercentParams) error {
	_, err := q.db.ExecContext(ctx, insert5MinBUSDPercent,
		arg.Prevtime,
		arg.Symbol,
		arg.Price,
		arg.Prevprice,
		arg.Percent,
	)
	return err
}

const insert60MinBUSDPercent = `-- name: Insert60MinBUSDPercent :exec
INSERT INTO tblBUSD60MinPercent ("prevtime", "symbol", "price", "prevprice", "percent") VALUES ($1, $2, $3, $4, $5)
`

type Insert60MinBUSDPercentParams struct {
	Prevtime  sql.NullTime
	Symbol    sql.NullString
	Price     sql.NullFloat64
	Prevprice sql.NullFloat64
	Percent   sql.NullFloat64
}

func (q *Queries) Insert60MinBUSDPercent(ctx context.Context, arg Insert60MinBUSDPercentParams) error {
	_, err := q.db.ExecContext(ctx, insert60MinBUSDPercent,
		arg.Prevtime,
		arg.Symbol,
		arg.Price,
		arg.Prevprice,
		arg.Percent,
	)
	return err
}

const insertBUSDPrice = `-- name: InsertBUSDPrice :exec
INSERT INTO tblBUSDPrice ("price") VALUES ($1)
`

func (q *Queries) InsertBUSDPrice(ctx context.Context, price sql.NullString) error {
	_, err := q.db.ExecContext(ctx, insertBUSDPrice, price)
	return err
}

const insertTopCoinHistory = `-- name: InsertTopCoinHistory :exec
INSERT INTO tblBUSDTopCoinHistory (topCoin) VALUES ($1)
`

func (q *Queries) InsertTopCoinHistory(ctx context.Context, topcoin sql.NullString) error {
	_, err := q.db.ExecContext(ctx, insertTopCoinHistory, topcoin)
	return err
}
